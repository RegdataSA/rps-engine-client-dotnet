name: .NET

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

  # GitHub Packages Feed settings
  GITHUB_FEED: RegdataSA/rps-engine-client-dotnet
  GITHUB_KEY: ${{ secrets.PACKAGES_API_KEY }}

  # Official NuGet Feed settings
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: ${{ secrets.NUGET_API_KEY }}

on:
  release:
    types:
      - published

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x

    - name: Set variables
      id: vars
      run: | 
        arrTag=(${GITHUB_REF//\// })
        VERSION="${arrTag[2]}"
        VERSION="${VERSION//v}"
        echo ::set-output name=version::${VERSION}

    - name: Restore dependencies
      run: dotnet restore

    - name: Pack Regdata.RPS.Engine.Client
      run: dotnet pack -v normal --no-restore -c Release -p:PackageVersion=${{ steps.vars.outputs.version }} -o nupkg ./Client/Regdata.RPS.Engine.Client.csproj

    - name: Pack Regdata.RPS.Engine.Client.NetCore
      run: dotnet pack -v normal --no-restore -c Release -p:PackageVersion=${{ steps.vars.outputs.version }} -o nupkg ./NetCore/Regdata.RPS.Engine.Client.NetCore.csproj

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: nupkg
        path: ./nupkg/*.nupkg

  deploy:
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x

    - name: Install tools
      run: dotnet tool install gpr -g

    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: nupkg

    - name: Push to GitHub Feed
      run: gpr push './*.nupkg' --repository $GITHUB_FEED -k $GITHUB_KEY

    - name: Push to NuGet Feed
      run: dotnet nuget push ./*.nupkg --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY